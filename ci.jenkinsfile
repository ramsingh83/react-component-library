// Pipeline to Integrate the Application code into ETP SonarQube
pipeline {
    // Run all in Jenkins.
    agent { label 'buildbot_on_master' }

    // set some default options
    //  - colour output
    //  - log retention
    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '25'))
    }

    // Use the vCenter proxy to connect to internet.
    environment {
        http_proxy = 'http://217.147.78.194:8080'
        https_proxy = 'http://217.147.78.194:8080'
        vc_proxy = '217.147.78.194'
        vc_proxy_port = 8080
    }

    // This pipeline will be triggered via Webhook.

    stages {

        // Prepare the application and run the tests.
        stage('Build and Test') {
            steps {
                // Install dependencies and run tests generating reports.
                nodejs('Node-8') {
                    // These npm commands are executed under Node 8 version.
                    sh 'npm install'
                    sh 'npm run lint'
                    sh 'npm run doc'
                }

                // Clover publishing report to Jenkins.
                step([$class: 'CloverPublisher',
                    cloverReportDir: 'coverage',
                    cloverReportFileName: 'clover.xml'
                ])

                // Change the absolute paths in the coverage repost to relative.
                sh "[ -f coverage/lcov.info ] && sed -i 's,${WORKSPACE}/src,src,g' coverage/lcov.info"

                // Save the coverage reports.
                stash includes: 'coverage/**', name: 'test-coverage'
            }
        }

        // Run the SonarQube scanner and send the test results.
        stage('SonarQube') {
            // This env variable is only used in this stage.
            environment {
                SONAR_SCANNER_OPTS = "-Dhttp.proxyHost=${env.vc_proxy} -Dhttp.proxyPort=${env.vc_proxy_port} -Dhttps.proxyHost=${env.vc_proxy} -Dhttps.proxyPort=${env.vc_proxy_port}"
            }

            steps {
                // Retrieve the coverage to send to SonarQube server.
                unstash 'test-coverage'
                // Run steps in Node 8.
                nodejs('Node-8') {
                    script {
                        // Define the Sonar scanner from Jenkins tools and run the scanner.
                        def scannerHome = tool name: 'ETP SonarQube Scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                        withSonarQubeEnv(credentialsId: 'etp-sonarqube-access-token') {
                            // Run SonarQube scanner.
                            sh "${scannerHome}/bin/sonar-scanner"
                        }
                    }
                }
            }
        }

    }

    // Post build actions.
    post {
        always {
            // Send feedback to Bitbucket.
            script {
                // catchError in case the job is triggered manually.
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    currentBuild.result = currentBuild.result ?: 'SUCCESS'
                    notifyBitbucket()
                }
            }
        }
    }

}
