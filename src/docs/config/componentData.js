module.exports = /* eslint-disable */ [{"name":"Button","description":"","props":{"id":{"type":{"name":"string"},"required":false,"description":""},"disabled":{"type":{"name":"bool"},"required":false,"description":""},"handleClicked":{"type":{"name":"func"},"required":true,"description":""},"styles":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = (props) => {\r\n  const {\r\n    id,\r\n    disabled,\r\n    handleClicked,\r\n    children,\r\n    styles\r\n  } = props;\r\n  const classes = ['button'];\r\n  if (styles) {\r\n    classes.push(styles);\r\n  }\r\n  return (\r\n    <button\r\n      id={id}\r\n      type=\"button\"\r\n      className={classes.join(' ')}\r\n      disabled={disabled}\r\n      onClick={handleClicked}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\n\r\nButton.propTypes = {\r\n  id: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  handleClicked: PropTypes.func.isRequired,\r\n  styles: PropTypes.string\r\n};\r\n\r\nexport default Button;\r\n","examples":[{"name":"ExampleButton","description":"","code":"import React, { useState } from 'react';\r\nimport {\r\n  Button\r\n} from '../../../components';\r\n\r\nconst ExampleButton = () => {\r\n  const [validateForm, setValidateForm] = useState(false);\r\n\r\n  return (\r\n    <Button\r\n      styles=\"primary\"\r\n      handleClicked={() => setValidateForm(!validateForm)}>\r\n      Submit\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ExampleButton;\r\n"}]},{"name":"Checkbox","description":"","props":{"label":{"type":{"name":"string"},"required":true,"description":""},"id":{"type":{"name":"string"},"required":true,"description":""},"checked":{"type":{"name":"bool"},"required":false,"description":""},"disabled":{"type":{"name":"bool"},"required":false,"description":""},"setInputValue":{"type":{"name":"func"},"required":true,"description":""},"value":{"type":{"name":"string"},"required":true,"description":""},"invalid":{"type":{"name":"bool"},"required":false,"description":""},"describedBy":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Checkbox = ({\r\n  label,\r\n  id,\r\n  checked,\r\n  disabled,\r\n  value,\r\n  invalid,\r\n  describedBy,\r\n  setInputValue\r\n}) => {\r\n  const [isChecked, setIsChecked] = useState(checked || false);\r\n\r\n  useEffect(() => {\r\n    setInputValue(isChecked, value);\r\n  }, [isChecked]);\r\n\r\n  return (\r\n    <div className=\"form-item js-form-type-checkbox form-type-checkbox\">\r\n      <input\r\n        type=\"checkbox\"\r\n        id={id}\r\n        aria-invalid={invalid}\r\n        aria-describedby={describedBy}\r\n        className={`form-checkbox ${invalid ? 'invalid' : ''}`}\r\n        checked={checked}\r\n        onChange={() => setIsChecked(!isChecked)}\r\n        disabled={disabled}\r\n        value={value} />\r\n      <label className={`option ${disabled ? 'disabled' : ''}`} htmlFor={id}>\r\n        {label}\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nCheckbox.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  checked: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  setInputValue: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  invalid: PropTypes.bool,\r\n  describedBy: PropTypes.string\r\n};\r\n\r\nexport default Checkbox;\r\n","examples":[{"name":"ExampleCheckbox","description":"","code":"import React, { useState } from 'react';\r\nimport {\r\n  Checkbox\r\n} from '../../../components';\r\n\r\nconst ExampleCheckbox = () => {\r\n  const [formData, setFormData] = useState({\r\n    checkboxValue: ''\r\n  });\r\n\r\n  const handleCheckbox = (checked, value) => {\r\n    const newData = { ...formData };\r\n    if (checked) newData.checkboxValue = value;\r\n    setFormData(newData);\r\n  };\r\n\r\n  return (\r\n    <Checkbox\r\n      label=\"Checkbox label\"\r\n      value=\"en\"\r\n      id=\"check-id\"\r\n      setInputValue={handleCheckbox} />\r\n  );\r\n};\r\n\r\nexport default ExampleCheckbox;\r\n"}]},{"name":"ContactDetails","description":"","props":{"title":{"type":{"name":"string"},"required":false,"description":""},"email":{"type":{"name":"string"},"required":false,"description":""},"phone":{"type":{"name":"string"},"required":false,"description":""},"fields":{"type":{"name":"arrayOf","value":{"name":"shape","value":{}}},"required":false,"description":""},"validateInput":{"type":{"name":"bool"},"required":false,"description":""},"setValues":{"type":{"name":"func"},"required":false,"description":""}},"code":"import React, { useState, useLayoutEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactDetails = ({\r\n  title,\r\n  email,\r\n  phone,\r\n  fields,\r\n  validateInput,\r\n  setValues\r\n}) => {\r\n  const [contacts, setContacts] = useState({\r\n    email,\r\n    phone,\r\n    emailError: '',\r\n    phoneError: ''\r\n  });\r\n\r\n  useLayoutEffect(() => {\r\n    setValues(contacts);\r\n  }, [contacts]);\r\n\r\n  const [firstRender, setFirstRender] = useState(true);\r\n\r\n  const validate = () => {\r\n    const values = { ...contacts };\r\n    fields.forEach((field) => {\r\n      const pattern = new RegExp(field.pattern);\r\n      const value = values[field.key];\r\n      if (!value && field.required) {\r\n        values[`${field.key}Error`] = field.emptyError;\r\n      } else if (value && pattern && !pattern.test(value)) {\r\n        values[`${field.key}Error`] = field.invalidError;\r\n      } else {\r\n        contacts[`${field.key}Error`] = '';\r\n      }\r\n    });\r\n    setContacts(values);\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    setFirstRender(false);\r\n    if (!firstRender) {\r\n      validate();\r\n    }\r\n  }, [validateInput]);\r\n\r\n  const setError = key => contacts[`${key}Error`];\r\n\r\n  const handleOnInputChanged = (event) => {\r\n    event.preventDefault();\r\n    const { name, value } = event.target;\r\n    const inputDetails = fields.find(input => input.key === name);\r\n    if (!value) {\r\n      if (inputDetails.required) {\r\n        contacts[`${name}Error`] = inputDetails.emptyError;\r\n      } else {\r\n        contacts[`${name}Error`] = '';\r\n      }\r\n    } else {\r\n      contacts[`${name}Error`] = '';\r\n    }\r\n\r\n    setContacts({ ...contacts, [name]: value });\r\n  };\r\n\r\n  const handleFocusOut = (event) => {\r\n    event.preventDefault();\r\n    const { name, value } = event.target;\r\n    const inputs = fields.find(input => input.key === name);\r\n    const pattern = new RegExp(inputs.pattern);\r\n    if (value) {\r\n      if (pattern && !pattern.test(value)) {\r\n        contacts[`${name}Error`] = inputs.invalidError;\r\n      } else {\r\n        contacts[`${name}Error`] = '';\r\n      }\r\n    } else if (inputs.required) {\r\n      contacts[`${name}Error`] = inputs.emptyError;\r\n    } else {\r\n      contacts[`${name}Error`] = '';\r\n    }\r\n    setContacts({ ...contacts, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <fieldset className=\"contact-details\">\r\n      <legend>{title}</legend>\r\n      <div>\r\n        {\r\n          fields.map(field => (\r\n            <React.Fragment key={field.key}>\r\n              <div className=\"form-item\">\r\n                <label htmlFor={field.key} className=\"input-label\">\r\n                  <span className=\"input-label\">\r\n                    {field.label}\r\n                    {field.required ? <span className=\"mandatory\">*</span> : ''}\r\n                  </span>\r\n                  <input\r\n                    name={field.key}\r\n                    type=\"text\"\r\n                    className={`form-input ${setError(field.key) ? 'invalid' : ''}`}\r\n                    aria-describedby={`${field.key}-error`}\r\n                    aria-label={field.label}\r\n                    placeholder={field.placeholder}\r\n                    autoComplete={field.autoComplete || 'off'}\r\n                    onChange={handleOnInputChanged}\r\n                    onBlur={handleFocusOut}\r\n                    value={contacts[field.key] || ''}\r\n                    maxLength={field.maxLength}\r\n                    minLength={field.minLength}\r\n                    aria-required=\"true\"\r\n                    aria-invalid={!!setError(field.key)} />\r\n                </label>\r\n                <div id={`${field.key}-error`} className=\"error-info\">{setError(field.key)}</div>\r\n              </div>\r\n            </React.Fragment>\r\n          ))\r\n        }\r\n      </div>\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nContactDetails.propTypes = {\r\n  title: PropTypes.string,\r\n  email: PropTypes.string,\r\n  phone: PropTypes.string,\r\n  fields: PropTypes.arrayOf(PropTypes.shape({})),\r\n  validateInput: PropTypes.bool,\r\n  setValues: PropTypes.func\r\n};\r\n\r\nexport default ContactDetails;\r\n","examples":[{"name":"ExampleContactDetails","description":"","code":"import React, { useState } from 'react';\r\nimport {\r\n  ContactDetails\r\n} from '../../../components';\r\nimport Config from '../../../config.json';\r\n\r\nconst ExampleContactDetails = () => {\r\n  const [validateForm] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    email: '',\r\n    phone: '',\r\n    error: {\r\n      emailError: '',\r\n      phoneError: ''\r\n    }\r\n  });\r\n\r\n  const handleContacts = (contact) => {\r\n    const newData = { ...formData };\r\n    newData.email = contact.email;\r\n    newData.phone = contact.phone;\r\n    newData.error.emailError = contact.emailError;\r\n    newData.error.phoneError = contact.phoneError;\r\n    setFormData(newData);\r\n  };\r\n\r\n  return (\r\n    <ContactDetails\r\n      title=\"\"\r\n      fields={Config.contacts.fields}\r\n      email=\"\"\r\n      phone=\"\"\r\n      validateInput={validateForm}\r\n      setValues={handleContacts} />\r\n  );\r\n};\r\n\r\nexport default ExampleContactDetails;\r\n"}]},{"name":"DropDown","description":"","props":{"handleBlur":{"type":{"name":"func"},"required":true,"description":""},"handleChange":{"type":{"name":"func"},"required":true,"description":""},"items":{"type":{"name":"arrayOf","value":{"name":"shape","value":{}}},"required":false,"description":""},"label":{"type":{"name":"string"},"required":false,"description":""},"elementId":{"type":{"name":"string"},"required":false,"description":""},"disabled":{"type":{"name":"bool"},"required":false,"description":""},"selectedValue":{"type":{"name":"string"},"required":false,"description":""},"invalid":{"type":{"name":"bool"},"required":false,"description":""},"dropDownRef":{"type":{"name":"shape","value":{}},"required":false,"description":""},"describedBy":{"type":{"name":"string"},"required":false,"description":""},"required":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Dropdown = ({\r\n  handleChange,\r\n  handleBlur,\r\n  elementId,\r\n  items,\r\n  label,\r\n  disabled,\r\n  selectedValue,\r\n  children,\r\n  invalid,\r\n  dropDownRef,\r\n  describedBy,\r\n  required\r\n}) => (\r\n  <div className=\"form-item-select js-form-item form-item js-form-type-select form-type-select js-form-item-select\">\r\n    <label className=\"input-label\" htmlFor={elementId}>\r\n      {label}\r\n      {required ? <span className=\"mandatory\">*</span> : ''}\r\n      {children}\r\n    </label>\r\n    <select\r\n      id={elementId}\r\n      className={invalid ? 'error' : ''}\r\n      aria-invalid={invalid}\r\n      onBlur={handleBlur}\r\n      onChange={handleChange}\r\n      aria-label={label}\r\n      ref={dropDownRef || undefined}\r\n      aria-describedby={describedBy}\r\n      aria-live=\"assertive\"\r\n      disabled={disabled}\r\n      value={selectedValue}>\r\n      {\r\n        items.map(({ id, name }) => (\r\n          <option key={id} value={id}>\r\n            {name}\r\n          </option>\r\n        ))\r\n      }\r\n    </select>\r\n  </div>\r\n);\r\n\r\nDropdown.propTypes = {\r\n  handleBlur: PropTypes.func.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n  items: PropTypes.arrayOf(PropTypes.shape({})),\r\n  label: PropTypes.string,\r\n  elementId: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  selectedValue: PropTypes.string,\r\n  invalid: PropTypes.bool,\r\n  dropDownRef: PropTypes.shape({}),\r\n  describedBy: PropTypes.string,\r\n  required: PropTypes.bool\r\n};\r\n\r\nexport default Dropdown;\r\n","examples":[{"name":"ExampleDropDown","description":"","code":"import React from 'react';\r\nimport {\r\n  Dropdown\r\n} from '../../../components';\r\n\r\nconst ExampleDropdown = () => {\r\n  const items = [\r\n    { id: '0', name: '--Select--' },\r\n    { id: '1', name: 'ContactDetails' },\r\n    { id: '2', name: 'PostcodeFinder' },\r\n    { id: '3', name: 'Calendar' }\r\n  ];\r\n\r\n  return (\r\n    <Dropdown\r\n      items={items}\r\n      label=\"Dropdown label\"\r\n      handleChange={() => {}}\r\n      handleBlur={() => {}}\r\n      required />\r\n  );\r\n};\r\n\r\nexport default ExampleDropdown;\r\n"}]},{"name":"Icon","description":"","props":{"name":{"type":{"name":"string"},"required":true,"description":""},"id":{"type":{"name":"string"},"required":true,"description":""},"ariaHidden":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'true'","computed":false}},"extraClass":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"focusable":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'false'","computed":false}},"title":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Icon = ({\r\n  name, id, title, extraClass = '', ariaHidden = 'true', focusable = 'false'\r\n}) => {\r\n  const iconClass = `icon ${extraClass} icon--${name}`;\r\n  return (\r\n    <span className=\"icon__wrapper\">\r\n      <svg\r\n        className={iconClass}\r\n        aria-hidden={title ? null : ariaHidden}\r\n        focusable={focusable}\r\n        role=\"img\"\r\n        aria-labelledby={title ? id : null}>\r\n        {title ? <title id={id}>{title}</title> : null}\r\n        <use\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n          xlinkHref={'#' + name} />\r\n      </svg>\r\n    </span>\r\n  );\r\n};\r\n\r\nIcon.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  ariaHidden: PropTypes.string,\r\n  extraClass: PropTypes.string,\r\n  focusable: PropTypes.string,\r\n  title: PropTypes.string\r\n};\r\n\r\nexport default Icon;\r\n","examples":[]},{"name":"Input","description":"","props":{"config":{"type":{"name":"shape","value":{}},"required":false,"description":""},"inputValue":{"type":{"name":"string"},"required":false,"description":""},"inputId":{"type":{"name":"string"},"required":true,"description":""},"setInputValue":{"type":{"name":"func"},"required":false,"description":""},"inputRef":{"type":{"name":"shape","value":{}},"required":false,"description":""},"validateInput":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React, { useState, useLayoutEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Input = (props) => {\r\n  const {\r\n    config,\r\n    inputValue,\r\n    inputId,\r\n    children,\r\n    inputRef,\r\n    setInputValue,\r\n    validateInput\r\n  } = props;\r\n\r\n  const [value, setValue] = useState(inputValue || '');\r\n  const [firstRender, setFirstRender] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const currencyOptions = {\r\n    maximumFractionDigits: 2,\r\n    currency: 'GBP',\r\n    style: 'currency'\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    setInputValue(value, error);\r\n  }, [value, error]);\r\n\r\n  /**\r\n   * Convert string type value to number.\r\n   * Especially for currency input type.\r\n   * @param {string} amount - amount with string type\r\n   * @returns {number} amount in number type.\r\n   */\r\n  const localStringToNumber = (amount) => {\r\n    const regExp = new RegExp(config.currencyPattern, 'g');\r\n    return Number(String(amount).replace(regExp, ''));\r\n  };\r\n\r\n  const validate = () => {\r\n    const inputPattern = new RegExp(config.pattern);\r\n    let newError = '';\r\n    if (value && inputPattern && !inputPattern.test(value)) {\r\n      newError = config.invalidError;\r\n    } else if (!value && config.required) {\r\n      newError = config.emptyError;\r\n    } else {\r\n      newError = '';\r\n    }\r\n    setError(newError);\r\n  };\r\n\r\n  /**\r\n   * remove any special characters except (,) and (.)\r\n   * @param {string} val - user input value.\r\n   * @returns {string} - value with no special characters.\r\n   */\r\n  const formatCurrencyValue = val => val\r\n    .replace(/[^0-9.,]/g, '').trim();\r\n\r\n  /**\r\n   * validate currency based on min and max config values.\r\n   * @param {string} targetValue - user entered amount.\r\n   * @param {*} currencyConfig - config related to currency.\r\n   * @param {*} options - currency options.\r\n   */\r\n  const validateCurrencyValue = (targetValue, currencyConfig, options) => {\r\n    // Remove all special characters except decimal for money comparisons\r\n    const amount = String(targetValue).replace(/[^\\d.]/g, '');\r\n    const validationResult = {\r\n      result: formatCurrencyValue(localStringToNumber(amount)\r\n        .toLocaleString(undefined, options)),\r\n      errorMessage: ''\r\n    };\r\n\r\n    switch (true) {\r\n    case (amount < currencyConfig.minAmount):\r\n      validationResult.errorMessage = currencyConfig.minAmountError;\r\n      break;\r\n    case (amount > currencyConfig.maxAmount):\r\n      validationResult.errorMessage = currencyConfig.maxAmountError;\r\n      break;\r\n    default:\r\n      break;\r\n    }\r\n\r\n    return validationResult;\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    setFirstRender(false);\r\n    if (!firstRender) {\r\n      validate();\r\n    }\r\n  }, [validateInput]);\r\n\r\n  const handleOnInputChanged = (e) => {\r\n    e.preventDefault();\r\n    let newError = '';\r\n    if (!e.target.value) {\r\n      newError = config.emptyError;\r\n    } else {\r\n      newError = '';\r\n    }\r\n    setValue(e.target.value);\r\n    setError(newError);\r\n  };\r\n\r\n  const handleFocusOut = (e) => {\r\n    e.preventDefault();\r\n    const targetValue = e.target.value;\r\n    const inputPattern = new RegExp(config.pattern);\r\n    let newError = '';\r\n\r\n    if (value && inputPattern && !inputPattern.test(value)) {\r\n      newError = config.invalidError;\r\n    } else if (!value && config.required) {\r\n      newError = config.emptyError;\r\n    } else {\r\n      newError = '';\r\n    }\r\n\r\n    // If input type is currency perform extra validation to get currency value.\r\n    if (inputPattern.test(targetValue) && targetValue && config.inputType === 'currency') {\r\n      const { result, errorMessage } = validateCurrencyValue(targetValue, config, currencyOptions);\r\n      setValue(result);\r\n      newError = errorMessage;\r\n    }\r\n\r\n    setError(newError);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-item\">\r\n      <label htmlFor={inputId}>\r\n        <span className=\"input-label card-name-label\">\r\n          {config.label}\r\n          {config.required ? <span className=\"mandatory\">*</span> : ''}\r\n        </span>\r\n        {children}\r\n        <input\r\n          id={inputId}\r\n          type=\"text\"\r\n          tabIndex=\"0\"\r\n          className={error ? 'invalid' : ''}\r\n          aria-describedby={`${inputId}-error`}\r\n          aria-label={config.label}\r\n          placeholder={config.placeholder}\r\n          onChange={handleOnInputChanged}\r\n          onBlur={handleFocusOut}\r\n          value={value}\r\n          ref={inputRef}\r\n          maxLength={config.maxLength}\r\n          minLength={config.minLength}\r\n          aria-required=\"true\"\r\n          aria-invalid={!!error} />\r\n      </label>\r\n      <div id={`${inputId}-error`} className=\"error-info\">{error}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nInput.propTypes = {\r\n  config: PropTypes.shape({}),\r\n  inputValue: PropTypes.string,\r\n  inputId: PropTypes.string.isRequired,\r\n  setInputValue: PropTypes.func,\r\n  inputRef: PropTypes.shape({}),\r\n  validateInput: PropTypes.bool\r\n};\r\nexport default Input;\r\n","examples":[{"name":"CurrencyInput","description":"","code":"import React, { useState } from 'react';\r\nimport {\r\n  Input\r\n} from '../../../components';\r\nimport Config from '../../../config.json';\r\n\r\nconst CurrencyInput = () => {\r\n  const [validateForm] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    currencyValue: 0,\r\n    error: {\r\n      currencyValueError: ''\r\n    }\r\n  });\r\n\r\n  const handleCurrencyValue = (value, error) => {\r\n    const newData = { ...formData };\r\n    newData.currencyValue = value;\r\n    newData.error.currencyValueError = error;\r\n    setFormData(newData);\r\n  };\r\n\r\n  return (\r\n    <Input\r\n      config={Config.currencyInput}\r\n      inputId=\"currency-input-id\"\r\n      inputValue={formData.currencyValue}\r\n      setInputValue={handleCurrencyValue}\r\n      validateInput={validateForm} />\r\n  );\r\n};\r\n\r\nexport default CurrencyInput;\r\n"},{"name":"NumericInput","description":"","code":"import React, { useState } from 'react';\r\nimport {\r\n  Input\r\n} from '../../../components';\r\nimport Config from '../../../config.json';\r\n\r\nconst NumericInput = () => {\r\n  const [validateForm] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    numeric: 0,\r\n    error: {\r\n      numericError: ''\r\n    }\r\n  });\r\n\r\n  const handleNumeric = (value, error) => {\r\n    const newData = { ...formData };\r\n    newData.numeric = value;\r\n    newData.error.numericError = error;\r\n    setFormData(newData);\r\n  };\r\n\r\n  return (\r\n    <Input\r\n      config={Config.numberInput}\r\n      inputId=\"numeric-input-id\"\r\n      inputValue={formData.numeric}\r\n      setInputValue={handleNumeric}\r\n      validateInput={validateForm} />\r\n  );\r\n};\r\n\r\nexport default NumericInput;\r\n"},{"name":"TextInput","description":"","code":"import React, { useState } from 'react';\r\nimport {\r\n  Input\r\n} from '../../../components';\r\nimport Config from '../../../config.json';\r\n\r\nconst TextInput = () => {\r\n  const [validateForm] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    error: {\r\n      nameError: ''\r\n    }\r\n  });\r\n\r\n  const handleName = (value, error) => {\r\n    const newData = { ...formData };\r\n    newData.name = value;\r\n    newData.error.nameError = error;\r\n    setFormData(newData);\r\n  };\r\n\r\n  return (\r\n    <Input\r\n      config={Config.input}\r\n      inputId=\"input-id\"\r\n      inputValue={formData.name}\r\n      setInputValue={handleName}\r\n      validateInput={validateForm} />\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n"}]},{"name":"Modal","description":"","props":{"id":{"type":{"name":"string"},"required":false,"description":""},"dialogTitle":{"type":{"name":"string"},"required":false,"description":""},"dialogDescription":{"type":{"name":"string"},"required":false,"description":""},"closed":{"type":{"name":"func"},"required":true,"description":""}},"code":"import React, { useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Icon from '../Icon/Icon';\r\nimport useClickAway from '../../hooks/useClickAway';\r\nimport './modal.scss';\r\n\r\nconst Modal = (props) => {\r\n  const {\r\n    id,\r\n    children,\r\n    dialogTitle,\r\n    dialogDescription,\r\n    closed\r\n  } = props;\r\n\r\n  const closeButton = useRef();\r\n  const rootRef = useRef();\r\n\r\n  useEffect(() => {\r\n    closeButton.current.focus();\r\n  }, []);\r\n\r\n  useClickAway(rootRef, (e) => {\r\n    closed(e);\r\n  });\r\n\r\n  return (\r\n    <div\r\n      id={id}\r\n      className=\"modal\"\r\n      role=\"dialog\"\r\n      aria-labelledby={dialogTitle}\r\n      aria-describedby={dialogDescription}\r\n      ref={rootRef}>\r\n      <button\r\n        type=\"button\"\r\n        ref={closeButton}\r\n        aria-label=\"close\"\r\n        className=\"close-button\"\r\n        onClick={e => closed(e)}\r\n        onKeyDown={e => closed(e)}>\r\n        <Icon name=\"close\" id=\"close\" />\r\n      </button>\r\n      <div className=\"modal-content\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nModal.propTypes = {\r\n  id: PropTypes.string,\r\n  dialogTitle: PropTypes.string,\r\n  dialogDescription: PropTypes.string,\r\n  closed: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Modal;\r\n","examples":[{"name":"ExampleModal","description":"","code":"import React, { useState } from 'react';\r\nimport { Modal, Button } from '../../../components';\r\n\r\nconst ExampleModal = () => {\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        handleClicked={() => setModalOpen(true)}>\r\n        Open Modal\r\n      </Button>\r\n      {modalOpen && (\r\n        <Modal\r\n          closed={() => setModalOpen(false)}\r\n          dialogTitle=\"dialogTitle\"\r\n          dialogDescription=\"dialogLinkDescription\">\r\n          <h1 id=\"dialogTitle\">Blah blah blah h1</h1>\r\n          <h2>Blah blah blah h2</h2>\r\n          <p id=\"dialogLinkDescription\">Some exciting paragraph</p>\r\n          <img src=\"https://www.royalmail.com/sites/default/files/fee-to-pay-card---390x550.png\" alt=\"\" />\r\n        </Modal>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ExampleModal;\r\n"}]},{"name":"PostcodeFinder","description":"","props":{"config":{"type":{"name":"shape","value":{}},"required":false,"description":""},"placeholder":{"type":{"name":"string"},"required":false,"description":""},"label":{"type":{"name":"string"},"required":true,"description":""},"setSearchResult":{"type":{"name":"func"},"required":true,"description":""},"validateInput":{"type":{"name":"bool"},"required":true,"description":""},"required":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React, { useState, useRef, useLayoutEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport { DebounceInput } from 'react-debounce-input';\r\nimport AddressList from './AddressList';\r\n\r\nconst PostcodeFinder = (props) => {\r\n  const [searchText, setSearchText] = useState('');\r\n  const [addressList, setAddressList] = useState(null);\r\n  const [firstRender, setFirstRender] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [loqateAddress, setLoqateAddress] = useState(null);\r\n\r\n  const searchRef = useRef(null);\r\n\r\n  const {\r\n    setSearchResult,\r\n    label,\r\n    placeholder,\r\n    children,\r\n    required,\r\n    config,\r\n    validateInput\r\n  } = props;\r\n\r\n  const {\r\n    channelIsland,\r\n    britishForce,\r\n    key,\r\n    addressKeyNames,\r\n    addressErrors\r\n  } = config;\r\n\r\n  useLayoutEffect(() => {\r\n    setSearchResult(loqateAddress, error);\r\n  }, [loqateAddress, error]);\r\n\r\n  const validate = () => {\r\n    if (!loqateAddress) {\r\n      setError(addressErrors.requiredFieldError);\r\n    } else if (loqateAddress && error === addressErrors.requiredFieldError) {\r\n      setError('');\r\n    }\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    setFirstRender(false);\r\n    if (!firstRender) {\r\n      validate();\r\n    }\r\n  }, [validateInput]);\r\n  /**\r\n   * Format loqate result to get following address fields\r\n   * Line1, Line2, Line3, Line4, Line5, City and PostalCode\r\n   */\r\n  const getFormattedAddress = (selectedAddress) => {\r\n    const address = {};\r\n    addressKeyNames.forEach((addressKey) => {\r\n      if (selectedAddress) {\r\n        address[addressKey] = selectedAddress[addressKey];\r\n      }\r\n    });\r\n    setLoqateAddress(address);\r\n  };\r\n\r\n  const getAddressList = (addressStr, addressId) => {\r\n    let addresses = [];\r\n    return axios.get(`https://services.postcodeanywhere.co.uk/Capture/Interactive/Find/v1.00/json3ex.ws?Key=${encodeURIComponent(key)}&Country=GBR&Text=${addressStr}&Container=${addressId}&LanguagePreference=en&LastId=${addressId}&SearchFor=Everything&$block=true&$cache=true`)\r\n      .then((response) => {\r\n        if (response.data.Items && response.data.Items.length > 0 && response.data.Items[0].Error) {\r\n          const newError = addressErrors.invalidSearchError.replace('@', addressStr);\r\n          setError(newError);\r\n          return;\r\n        }\r\n\r\n        if (response.data.Items && response.data.Items.length === 0) {\r\n          const errorDescription = addressErrors.invalidSearchError.replace('@', addressStr);\r\n          setError(errorDescription);\r\n          return;\r\n        }\r\n\r\n        if (response.data.Items && response.data.Items.length > 0) {\r\n          addresses = response.data.Items;\r\n        }\r\n      })\r\n      .catch(() => {\r\n        const newError = addressErrors.apiDownError;\r\n        setError(newError);\r\n      })\r\n      .then(() => {\r\n        setAddressList(addresses);\r\n      });\r\n  };\r\n\r\n  const getAddressDetails = (address) => {\r\n    if (address.Type === 'Address') {\r\n      let newError = '';\r\n      axios.get(`https://services.postcodeanywhere.co.uk/Capture/Interactive/Retrieve/v1.00/json3ex.ws?Key=${encodeURIComponent(key)}&Id=${address.Id}&$cache=true&$block=true&LastId=${address.Id}&SearchTerm=&field1format=${encodeURIComponent('{Latitude}')}&field2format=${encodeURIComponent('{Longitude}')}`)\r\n        .then((response) => {\r\n          if (response.data.Items && response.data.Items.length > 0) {\r\n            const selectedAddress = response.data.Items[0];\r\n            const postalCode = response.data.Items[0].PostalCode;\r\n            const areaCode = postalCode.replace(/ /g, '').substring(0, 2).toUpperCase();\r\n            // Check for british force area and channelIsland.\r\n            if (britishForce && britishForce.toUpperCase() === areaCode) {\r\n              newError = addressErrors.britishForceError;\r\n            } else if (channelIsland.length && channelIsland.includes(areaCode)) {\r\n              newError = addressErrors.channelIslandError;\r\n            } else {\r\n              getFormattedAddress(selectedAddress);\r\n            }\r\n            setError(newError);\r\n            setAddressList([]);\r\n            setSearchText('');\r\n          }\r\n        })\r\n        .catch(() => {\r\n          newError = addressErrors.apiDownError;\r\n          setError(newError);\r\n        });\r\n\r\n      if (searchRef.current) {\r\n        searchRef.current.focus();\r\n      }\r\n      return;\r\n    }\r\n    getAddressList(address, address.Id);\r\n  };\r\n\r\n  const onHandleAddressListKeyDown = (address, e) => {\r\n    if (e.keyCode === undefined || (e.keyCode || e.which) === 13) {\r\n      getAddressDetails(address);\r\n    }\r\n  };\r\n\r\n  const onHandleSearchInputChanged = (e) => {\r\n    if (e.target.value) {\r\n      setLoqateAddress(null);\r\n      setError('');\r\n      setSearchText(e.target.value);\r\n      getAddressList(e.target.value);\r\n    }\r\n\r\n    if (!e.target.value) {\r\n      setSearchText(e.target.value);\r\n      setAddressList([]);\r\n      setError('');\r\n    }\r\n  };\r\n\r\n  const handleFocusOut = (e) => {\r\n    e.preventDefault();\r\n    if (!loqateAddress && !addressList) {\r\n      setError(addressErrors.requiredFieldError);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"postcode-finder\">\r\n      <div className=\"form-item\">\r\n        <label htmlFor=\"search-input\">\r\n          <span className=\"input-label\">\r\n            {label}\r\n            {required ? <span className=\"mandatory\">*</span> : ''}\r\n            {children}\r\n          </span>\r\n          <DebounceInput\r\n            debounceTimeout={500}\r\n            id=\"search-input\"\r\n            inputRef={searchRef}\r\n            className={error ? 'invalid' : ''}\r\n            placeholder={placeholder}\r\n            onChange={e => onHandleSearchInputChanged(e)}\r\n            onBlur={handleFocusOut}\r\n            value={searchText}\r\n            aria-required=\"true\"\r\n            aria-describedby=\"address-error\"\r\n            aria-invalid={!!error} />\r\n          <span id=\"search-input-help\" className=\"visually-hidden\">{placeholder}</span>\r\n        </label>\r\n        {\r\n          error ? <div id=\"address-error\" className=\"error-info\">{error}</div> : null\r\n        }\r\n      </div>\r\n      <div role=\"alert\" className=\"visually-hidden\">\r\n        {addressList ? `${addressList.length} address Found` : null}\r\n      </div>\r\n      {\r\n        addressList && addressList.length > 0\r\n          ? (\r\n            <AddressList\r\n              results={addressList}\r\n              getDetails={address => getAddressDetails(address)}\r\n              handleKeyDown={(result, e) => onHandleAddressListKeyDown(result, e)} />\r\n          ) : null\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nPostcodeFinder.propTypes = {\r\n  config: PropTypes.shape({}),\r\n  placeholder: PropTypes.string,\r\n  label: PropTypes.string.isRequired,\r\n  setSearchResult: PropTypes.func.isRequired,\r\n  validateInput: PropTypes.bool.isRequired,\r\n  required: PropTypes.bool\r\n};\r\n\r\nexport default PostcodeFinder;\r\n","examples":[{"name":"ExamplePostcodeFinder","description":"","code":"import React, { useState } from 'react';\r\nimport {\r\n  PostcodeFinder\r\n} from '../../../components';\r\nimport Config from '../../../config.json';\r\n\r\nconst ExamplePostcodeFinder = () => {\r\n  const [validateForm] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    address: '',\r\n    error: {\r\n      addressError: ''\r\n    }\r\n  });\r\n\r\n  const handleAddress = (address, error) => {\r\n    const newData = { ...formData };\r\n    newData.address = address;\r\n    newData.error.addressError = error;\r\n    setFormData(newData);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PostcodeFinder\r\n        label=\"Address\"\r\n        placeholder=\"start typing your address\"\r\n        setSearchResult={handleAddress}\r\n        config={Config.loqate}\r\n        validateInput={validateForm}\r\n        required />\r\n      <div className=\"address-desc\">\r\n        {\r\n          formData.address\r\n          && Object.values(formData.address).filter(Boolean).map((val, index) => {\r\n            const key = `${index}-${val}`;\r\n            return (\r\n              <span className=\"address-line\" key={key}>{val}</span>\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ExamplePostcodeFinder;\r\n"}]},{"name":"RadioButton","description":"","props":{"id":{"type":{"name":"string"},"required":true,"description":""},"value":{"type":{"name":"string"},"required":false,"description":""},"checked":{"type":{"name":"bool"},"required":false,"description":""},"name":{"type":{"name":"string"},"required":false,"description":""},"handleOptionChange":{"type":{"name":"func"},"required":false,"description":""},"invalid":{"type":{"name":"bool"},"required":false,"description":""},"disabled":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst RadioButton = (props) => {\r\n  const {\r\n    id,\r\n    value,\r\n    checked,\r\n    handleOptionChange,\r\n    name,\r\n    invalid,\r\n    children,\r\n    disabled\r\n  } = props;\r\n  return (\r\n    <div className=\"form-item js-form-type-radio form-type-radio\">\r\n      <input\r\n        type=\"radio\"\r\n        id={id}\r\n        className=\"form-checkbox\"\r\n        value={value}\r\n        checked={checked}\r\n        disabled={disabled || undefined}\r\n        name={name}\r\n        onChange={handleOptionChange}\r\n        aria-invalid={invalid} />\r\n      <label className={`option ${invalid ? 'invalid' : ''}`} htmlFor={id}>\r\n        {children}\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nRadioButton.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  value: PropTypes.string,\r\n  checked: PropTypes.bool,\r\n  name: PropTypes.string,\r\n  handleOptionChange: PropTypes.func,\r\n  invalid: PropTypes.bool,\r\n  disabled: PropTypes.bool\r\n};\r\n\r\nexport default RadioButton;\r\n","examples":[{"name":"ExampleRadioButton","description":"","code":"import React from 'react';\r\nimport {\r\n  RadioButton\r\n} from '../../../components';\r\n\r\nconst ExampleButton = () => (\r\n  <React.Fragment>\r\n    <RadioButton name=\"YES\" id=\"yes-id\" value=\"YES\">Radio Button 1</RadioButton>\r\n    <RadioButton name=\"NO\" id=\"no-id\" value=\"NO\">Radio Button 2</RadioButton>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default ExampleButton;\r\n"}]},{"name":"RadioButtonGroup","description":"","props":{"name":{"type":{"name":"string"},"required":true,"description":""},"setRadioButtonValue":{"type":{"name":"func"},"required":true,"description":""},"invalid":{"type":{"name":"bool"},"required":false,"description":""},"config":{"type":{"name":"shape","value":{}},"required":true,"description":""},"defaultValue":{"type":{"name":"string"},"required":false,"description":""},"initialValidation":{"type":{"name":"bool"},"required":true,"description":""}},"code":"import React, { useState, useLayoutEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst RadioButtonGroup = (props) => {\r\n  const {\r\n    config,\r\n    setRadioButtonValue,\r\n    initialValidation,\r\n    defaultValue,\r\n    name,\r\n    invalid\r\n  } = props;\r\n\r\n  const [firstRender, setfirstRender] = useState(true);\r\n  const [value, setValue] = useState(defaultValue || '');\r\n  const [error, setError] = useState('');\r\n\r\n  const validate = () => {\r\n    setError(!value ? config.emptyError : '');\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    setRadioButtonValue(value);\r\n  }, [value]);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!firstRender) {\r\n      validate();\r\n    } else {\r\n      setfirstRender(false);\r\n    }\r\n  }, [initialValidation]);\r\n\r\n  const handleOptionChange = (e) => {\r\n    setValue(e.target.value);\r\n    setError('');\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        config.fields.map(field => (\r\n          <div className=\"form-item js-form-type-radio form-type-radio\" key={field.id}>\r\n            <input\r\n              type=\"radio\"\r\n              id={field.id}\r\n              className=\"form-checkbox\"\r\n              value={field.value}\r\n              checked={value === field.value}\r\n              disabled={field.disabled || undefined}\r\n              name={name}\r\n              onChange={handleOptionChange}\r\n              aria-invalid={invalid} />\r\n            <label className={`option ${error ? 'invalid' : ''}`} htmlFor={field.id}>\r\n              {field.label}\r\n            </label>\r\n          </div>\r\n        ))\r\n      }\r\n      <div id={`${name}-error`} className=\"error-info\">{error}</div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nRadioButtonGroup.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  setRadioButtonValue: PropTypes.func.isRequired,\r\n  invalid: PropTypes.bool,\r\n  config: PropTypes.shape({}).isRequired,\r\n  defaultValue: PropTypes.string,\r\n  initialValidation: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default RadioButtonGroup;\r\n","examples":[{"name":"ExampleRadioButtonGroup","description":"","code":"import React, { useState } from 'react';\r\nimport {\r\n  RadioButtonGroup\r\n} from '../../../components';\r\nimport Config from '../../../config.json';\r\n\r\nconst ExampleRadioButtonGroup = () => {\r\n  const [validateForm] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    radioButtonValue: ''\r\n  });\r\n\r\n  const handleRadioButton = (value) => {\r\n    const newData = { ...formData };\r\n    newData.radioButtonValue = value;\r\n    setFormData(newData);\r\n  };\r\n\r\n  return (\r\n    <RadioButtonGroup\r\n      config={Config.radioButton}\r\n      name=\"radio-button-group\"\r\n      defaultValue=\"radio2\"\r\n      setRadioButtonValue={value => handleRadioButton(value)}\r\n      initialValidation={validateForm} />\r\n  );\r\n};\r\n\r\nexport default ExampleRadioButtonGroup;\r\n"}]},{"name":"SectionWrap","description":"","props":{"id":{"type":{"name":"string"},"required":false,"description":""},"extraClasses":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SectionWrap = (props) => {\r\n  const {\r\n    id,\r\n    extraClasses,\r\n    children\r\n  } = props;\r\n  const classes = ['section'];\r\n  if (extraClasses) {\r\n    classes.push(extraClasses);\r\n  }\r\n  return (\r\n    <section\r\n      id={id}\r\n      className={classes.join(' ')}>\r\n      <div className=\"section-inner\">\r\n        <div className=\"section-container\">\r\n          <div className=\"section-row\">\r\n            <div className=\"section-col\">\r\n              <div className=\"section-col-inner\">\r\n                {children}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nSectionWrap.propTypes = {\r\n  id: PropTypes.string,\r\n  extraClasses: PropTypes.string\r\n};\r\n\r\nexport default SectionWrap;\r\n","examples":[{"name":"ExampleSectionWrap","description":"","code":"import React from 'react';\r\nimport {\r\n  SectionWrap\r\n} from '../../../components';\r\n\r\nconst ExampleSectionWrap = () => (\r\n  <SectionWrap extraClasses=\"head\">\r\n    <h1>Component Library</h1>\r\n  </SectionWrap>\r\n);\r\n\r\nexport default ExampleSectionWrap;\r\n"}]},{"name":"Spinner","description":"","code":"import React from 'react';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => (\r\n  <div className=\"spinner-wrap\">\r\n    <div className=\"spinner\"></div>\r\n  </div>\r\n);\r\n\r\nexport default Spinner;\r\n","examples":[{"name":"ExampleSpinner","description":"","code":"import React from 'react';\r\nimport {\r\n  Spinner\r\n} from '../../../components';\r\n\r\nconst ExampleSpinner = () => <Spinner />;\r\n\r\nexport default ExampleSpinner;\r\n"}]},{"name":"Tooltip","description":"","props":{"message":{"type":{"name":"string"},"required":true,"description":""},"position":{"type":{"name":"string"},"required":true,"description":""}},"code":"/**\r\n * A reusable tooltip to render on mouse hover and destroy on mouse out.\r\n * This accept tooltip position(top, bottom,right,left) as props to render accordingly.\r\n * Element that need a tooltip on mouse hover need to be wrapped inside this component\r\n * e. g. <Tooltip> hover me </Tooltip>.\r\n */\r\nimport React, { useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { uniqueId } from 'lodash';\r\nimport Icon from '../Icon/Icon';\r\n\r\nconst Tooltip = (props) => {\r\n  const [displayTooltip, setDisplaytooltip] = useState(false);\r\n  const tooltipRef = useRef();\r\n  const {\r\n    position,\r\n    message\r\n  } = props;\r\n\r\n  const keyboardConstants = {\r\n    enter: 13 // The 13 value is equivalent to the \"Enter\" or the \"Return\" key code\r\n  };\r\n\r\n  const tooltipMessageId = uniqueId('toolTip-');\r\n\r\n  const handleToggleTooltip = (e) => {\r\n    if (e.which !== keyboardConstants.enter || e.keyCode !== keyboardConstants.enter) {\r\n      e.preventDefault();\r\n    }\r\n    setDisplaytooltip(!displayTooltip);\r\n    tooltipRef.current.focus();\r\n  };\r\n\r\n  const handleKeyPressToggle = (e) => {\r\n    e.preventDefault();\r\n    if (e.which === keyboardConstants.enter || e.keyCode === keyboardConstants.enter) {\r\n      handleToggleTooltip(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <span\r\n      className=\"tooltip\">\r\n      <span\r\n        role=\"button\"\r\n        tabIndex={0}\r\n        className=\"tooltip-trigger\"\r\n        aria-label=\"help\"\r\n        aria-describedby={tooltipMessageId}\r\n        aria-live=\"assertive\"\r\n        ref={tooltipRef}\r\n        onClick={handleToggleTooltip}\r\n        onKeyPress={handleKeyPressToggle}>\r\n        <Icon name=\"question\" id=\"help-tip\" />\r\n      </span>\r\n      {\r\n        displayTooltip\r\n        && (\r\n          <div className={`tooltip-bubble tooltip-${position}`}>\r\n            <div id={tooltipMessageId} className=\"tooltip-message\" aria-live=\"assertive\">\r\n              {message}\r\n            </div>\r\n            <span\r\n              role=\"button\"\r\n              tabIndex={0}\r\n              className=\"tooltip-close\"\r\n              aria-label=\"Close tooltip\"\r\n              onClick={handleToggleTooltip}\r\n              onKeyPress={handleKeyPressToggle}>\r\n              <Icon name=\"cross\" id=\"close\" />\r\n            </span>\r\n          </div>\r\n        )\r\n      }\r\n    </span>\r\n  );\r\n};\r\n\r\nTooltip.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  position: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Tooltip;\r\n","examples":[]}]