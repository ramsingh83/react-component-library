module.exports = /* eslint-disable */ [{"name":"Button","description":"","props":{"id":{"type":{"name":"string"},"required":false,"description":""},"disabled":{"type":{"name":"bool"},"required":false,"description":""},"handleClicked":{"type":{"name":"func"},"required":true,"description":""},"styles":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = (props) => {\n  const {\n    id,\n    disabled,\n    handleClicked,\n    children,\n    styles\n  } = props;\n  const classes = ['button'];\n  if (styles) {\n    classes.push(styles);\n  }\n  return (\n    <button\n      id={id}\n      type=\"button\"\n      className={classes.join(' ')}\n      disabled={disabled}\n      onClick={handleClicked}>\n      {children}\n    </button>\n  );\n};\n\n\nButton.propTypes = {\n  id: PropTypes.string,\n  disabled: PropTypes.bool,\n  handleClicked: PropTypes.func.isRequired,\n  styles: PropTypes.string\n};\n\nexport default Button;\n","examples":[{"name":"ExampleButton","description":"","code":"import React, { useState } from 'react';\nimport {\n  Button\n} from '../../../components';\n\nconst ExampleButton = () => {\n  const [validateForm, setValidateForm] = useState(false);\n\n  return (\n    <Button\n      styles=\"primary\"\n      handleClicked={() => setValidateForm(!validateForm)}>\n      Submit\n    </Button>\n  );\n};\n\nexport default ExampleButton;\n"}]},{"name":"Checkbox","description":"","props":{"label":{"type":{"name":"string"},"required":true,"description":""},"id":{"type":{"name":"string"},"required":true,"description":""},"checked":{"type":{"name":"bool"},"required":false,"description":""},"disabled":{"type":{"name":"bool"},"required":false,"description":""},"setInputValue":{"type":{"name":"func"},"required":true,"description":""},"value":{"type":{"name":"string"},"required":true,"description":""},"invalid":{"type":{"name":"bool"},"required":false,"description":""},"describedBy":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Checkbox = ({\n  label,\n  id,\n  checked,\n  disabled,\n  value,\n  invalid,\n  describedBy,\n  setInputValue\n}) => {\n  const [isChecked, setIsChecked] = useState(checked || false);\n\n  useEffect(() => {\n    setInputValue(isChecked, value);\n  }, [isChecked]);\n\n  return (\n    <div className=\"form-item js-form-type-checkbox form-type-checkbox\">\n      <input\n        type=\"checkbox\"\n        id={id}\n        aria-invalid={invalid}\n        aria-describedby={describedBy}\n        className={`form-checkbox ${invalid ? 'invalid' : ''}`}\n        checked={checked}\n        onChange={() => setIsChecked(!isChecked)}\n        disabled={disabled}\n        value={value} />\n      <label className={`option ${disabled ? 'disabled' : ''}`} htmlFor={id}>\n        {label}\n      </label>\n    </div>\n  );\n};\n\nCheckbox.propTypes = {\n  label: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  setInputValue: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  invalid: PropTypes.bool,\n  describedBy: PropTypes.string\n};\n\nexport default Checkbox;\n","examples":[{"name":"ExampleCheckbox","description":"","code":"import React, { useState } from 'react';\nimport {\n  Checkbox\n} from '../../../components';\n\nconst ExampleCheckbox = () => {\n  const [formData, setFormData] = useState({\n    checkboxValue: ''\n  });\n\n  const handleCheckbox = (checked, value) => {\n    const newData = { ...formData };\n    if (checked) newData.checkboxValue = value;\n    setFormData(newData);\n  };\n\n  return (\n    <Checkbox\n      label=\"Checkbox label\"\n      value=\"en\"\n      id=\"check-id\"\n      setInputValue={handleCheckbox} />\n  );\n};\n\nexport default ExampleCheckbox;\n"}]},{"name":"ContactDetails","description":"","props":{"title":{"type":{"name":"string"},"required":false,"description":""},"email":{"type":{"name":"string"},"required":false,"description":""},"phone":{"type":{"name":"string"},"required":false,"description":""},"fields":{"type":{"name":"arrayOf","value":{"name":"shape","value":{}}},"required":false,"description":""},"validateInput":{"type":{"name":"bool"},"required":false,"description":""},"setValues":{"type":{"name":"func"},"required":false,"description":""}},"code":"import React, { useState, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst ContactDetails = ({\n  title,\n  email,\n  phone,\n  fields,\n  validateInput,\n  setValues\n}) => {\n  const [contacts, setContacts] = useState({\n    email,\n    phone,\n    emailError: '',\n    phoneError: ''\n  });\n\n  useLayoutEffect(() => {\n    setValues(contacts);\n  }, [contacts]);\n\n  const [firstRender, setFirstRender] = useState(true);\n\n  const validate = () => {\n    const values = { ...contacts };\n    fields.forEach((field) => {\n      const pattern = new RegExp(field.pattern);\n      const value = values[field.key];\n      if (!value && field.required) {\n        values[`${field.key}Error`] = field.emptyError;\n      } else if (value && pattern && !pattern.test(value)) {\n        values[`${field.key}Error`] = field.invalidError;\n      } else {\n        contacts[`${field.key}Error`] = '';\n      }\n    });\n    setContacts(values);\n  };\n\n  useLayoutEffect(() => {\n    setFirstRender(false);\n    if (!firstRender) {\n      validate();\n    }\n  }, [validateInput]);\n\n  const setError = key => contacts[`${key}Error`];\n\n  const handleOnInputChanged = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    const inputDetails = fields.find(input => input.key === name);\n    if (!value) {\n      if (inputDetails.required) {\n        contacts[`${name}Error`] = inputDetails.emptyError;\n      } else {\n        contacts[`${name}Error`] = '';\n      }\n    } else {\n      contacts[`${name}Error`] = '';\n    }\n\n    setContacts({ ...contacts, [name]: value });\n  };\n\n  const handleFocusOut = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    const inputs = fields.find(input => input.key === name);\n    const pattern = new RegExp(inputs.pattern);\n    if (value) {\n      if (pattern && !pattern.test(value)) {\n        contacts[`${name}Error`] = inputs.invalidError;\n      } else {\n        contacts[`${name}Error`] = '';\n      }\n    } else if (inputs.required) {\n      contacts[`${name}Error`] = inputs.emptyError;\n    } else {\n      contacts[`${name}Error`] = '';\n    }\n    setContacts({ ...contacts, [name]: value });\n  };\n\n  return (\n    <fieldset className=\"contact-details\">\n      <legend>{title}</legend>\n      <div>\n        {\n          fields.map(field => (\n            <React.Fragment key={field.key}>\n              <div className=\"form-item\">\n                <label htmlFor={field.key} className=\"input-label\">\n                  <span className=\"input-label\">\n                    {field.label}\n                    {field.required ? <span className=\"mandatory\">*</span> : ''}\n                  </span>\n                  <input\n                    name={field.key}\n                    type=\"text\"\n                    className={`form-input ${setError(field.key) ? 'invalid' : ''}`}\n                    aria-describedby={`${field.key}-error`}\n                    aria-label={field.label}\n                    placeholder={field.placeholder}\n                    autoComplete={field.autoComplete || 'off'}\n                    onChange={handleOnInputChanged}\n                    onBlur={handleFocusOut}\n                    value={contacts[field.key] || ''}\n                    maxLength={field.maxLength}\n                    minLength={field.minLength}\n                    aria-required=\"true\"\n                    aria-invalid={!!setError(field.key)} />\n                </label>\n                <div id={`${field.key}-error`} className=\"error-info\">{setError(field.key)}</div>\n              </div>\n            </React.Fragment>\n          ))\n        }\n      </div>\n    </fieldset>\n  );\n};\n\nContactDetails.propTypes = {\n  title: PropTypes.string,\n  email: PropTypes.string,\n  phone: PropTypes.string,\n  fields: PropTypes.arrayOf(PropTypes.shape({})),\n  validateInput: PropTypes.bool,\n  setValues: PropTypes.func\n};\n\nexport default ContactDetails;\n","examples":[{"name":"ExampleContactDetails","description":"","code":"import React, { useState } from 'react';\nimport {\n  ContactDetails\n} from '../../../components';\nimport Config from '../../../config.json';\n\nconst ExampleContactDetails = () => {\n  const [validateForm] = useState(false);\n  const [formData, setFormData] = useState({\n    email: '',\n    phone: '',\n    error: {\n      emailError: '',\n      phoneError: ''\n    }\n  });\n\n  const handleContacts = (contact) => {\n    const newData = { ...formData };\n    newData.email = contact.email;\n    newData.phone = contact.phone;\n    newData.error.emailError = contact.emailError;\n    newData.error.phoneError = contact.phoneError;\n    setFormData(newData);\n  };\n\n  return (\n    <ContactDetails\n      title=\"\"\n      fields={Config.contacts.fields}\n      email=\"\"\n      phone=\"\"\n      validateInput={validateForm}\n      setValues={handleContacts} />\n  );\n};\n\nexport default ExampleContactDetails;\n"}]},{"name":"DropDown","description":"","props":{"handleBlur":{"type":{"name":"func"},"required":true,"description":""},"handleChange":{"type":{"name":"func"},"required":true,"description":""},"items":{"type":{"name":"arrayOf","value":{"name":"shape","value":{}}},"required":false,"description":""},"label":{"type":{"name":"string"},"required":false,"description":""},"elementId":{"type":{"name":"string"},"required":false,"description":""},"disabled":{"type":{"name":"bool"},"required":false,"description":""},"selectedValue":{"type":{"name":"string"},"required":false,"description":""},"invalid":{"type":{"name":"bool"},"required":false,"description":""},"dropDownRef":{"type":{"name":"shape","value":{}},"required":false,"description":""},"describedBy":{"type":{"name":"string"},"required":false,"description":""},"required":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Dropdown = ({\n  handleChange,\n  handleBlur,\n  elementId,\n  items,\n  label,\n  disabled,\n  selectedValue,\n  children,\n  invalid,\n  dropDownRef,\n  describedBy,\n  required\n}) => (\n  <div className=\"form-item-select js-form-item form-item js-form-type-select form-type-select js-form-item-select\">\n    <label className=\"input-label\" htmlFor={elementId}>\n      {label}\n      {required ? <span className=\"mandatory\">*</span> : ''}\n      {children}\n    </label>\n    <select\n      id={elementId}\n      className={invalid ? 'error' : ''}\n      aria-invalid={invalid}\n      onBlur={handleBlur}\n      onChange={handleChange}\n      aria-label={label}\n      ref={dropDownRef || undefined}\n      aria-describedby={describedBy}\n      aria-live=\"assertive\"\n      disabled={disabled}\n      value={selectedValue}>\n      {\n        items.map(({ id, name }) => (\n          <option key={id} value={id}>\n            {name}\n          </option>\n        ))\n      }\n    </select>\n  </div>\n);\n\nDropdown.propTypes = {\n  handleBlur: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.shape({})),\n  label: PropTypes.string,\n  elementId: PropTypes.string,\n  disabled: PropTypes.bool,\n  selectedValue: PropTypes.string,\n  invalid: PropTypes.bool,\n  dropDownRef: PropTypes.shape({}),\n  describedBy: PropTypes.string,\n  required: PropTypes.bool\n};\n\nexport default Dropdown;\n","examples":[{"name":"ExampleDropDown","description":"","code":"import React from 'react';\nimport {\n  Dropdown\n} from '../../../components';\n\nconst ExampleDropdown = () => {\n  const items = [\n    { id: '0', name: '--Select--' },\n    { id: '1', name: 'ContactDetails' },\n    { id: '2', name: 'PostcodeFinder' },\n    { id: '3', name: 'Calendar' }\n  ];\n\n  return (\n    <Dropdown\n      items={items}\n      label=\"Dropdown label\"\n      handleChange={() => {}}\n      handleBlur={() => {}}\n      required />\n  );\n};\n\nexport default ExampleDropdown;\n"}]},{"name":"Icon","description":"","props":{"name":{"type":{"name":"string"},"required":true,"description":""},"id":{"type":{"name":"string"},"required":true,"description":""},"ariaHidden":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'true'","computed":false}},"extraClass":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"focusable":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'false'","computed":false}},"title":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Icon = ({\n  name, id, title, extraClass = '', ariaHidden = 'true', focusable = 'false'\n}) => {\n  const iconClass = `icon ${extraClass} icon--${name}`;\n  return (\n    <span className=\"icon__wrapper\">\n      <svg\n        className={iconClass}\n        aria-hidden={title ? null : ariaHidden}\n        focusable={focusable}\n        role=\"img\"\n        aria-labelledby={title ? id : null}>\n        {title ? <title id={id}>{title}</title> : null}\n        <use\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          xlinkHref={'#' + name} />\n      </svg>\n    </span>\n  );\n};\n\nIcon.propTypes = {\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  ariaHidden: PropTypes.string,\n  extraClass: PropTypes.string,\n  focusable: PropTypes.string,\n  title: PropTypes.string\n};\n\nexport default Icon;\n","examples":[]},{"name":"Input","description":"","props":{"config":{"type":{"name":"shape","value":{}},"required":false,"description":""},"inputValue":{"type":{"name":"string"},"required":false,"description":""},"inputId":{"type":{"name":"string"},"required":true,"description":""},"setInputValue":{"type":{"name":"func"},"required":false,"description":""},"inputRef":{"type":{"name":"shape","value":{}},"required":false,"description":""},"validateInput":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React, { useState, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Input = (props) => {\n  const {\n    config,\n    inputValue,\n    inputId,\n    children,\n    inputRef,\n    setInputValue,\n    validateInput\n  } = props;\n\n  const [value, setValue] = useState(inputValue || '');\n  const [firstRender, setFirstRender] = useState(true);\n  const [error, setError] = useState('');\n  const currencyOptions = {\n    maximumFractionDigits: 2,\n    currency: 'GBP',\n    style: 'currency'\n  };\n\n  useLayoutEffect(() => {\n    setInputValue(value, error);\n  }, [value, error]);\n\n  /**\n   * Convert string type value to number.\n   * Especially for currency input type.\n   * @param {string} amount - amount with string type\n   * @returns {number} amount in number type.\n   */\n  const localStringToNumber = (amount) => {\n    const regExp = new RegExp(config.currencyPattern, 'g');\n    return Number(String(amount).replace(regExp, ''));\n  };\n\n  const validate = () => {\n    const inputPattern = new RegExp(config.pattern);\n    let newError = '';\n    if (value && inputPattern && !inputPattern.test(value)) {\n      newError = config.invalidError;\n    } else if (!value && config.required) {\n      newError = config.emptyError;\n    } else {\n      newError = '';\n    }\n    setError(newError);\n  };\n\n  /**\n   * remove any special characters except (,) and (.)\n   * @param {string} val - user input value.\n   * @returns {string} - value with no special characters.\n   */\n  const formatCurrencyValue = val => val\n    .replace(/[^0-9.,]/g, '').trim();\n\n  /**\n   * validate currency based on min and max config values.\n   * @param {string} targetValue - user entered amount.\n   * @param {*} currencyConfig - config related to currency.\n   * @param {*} options - currency options.\n   */\n  const validateCurrencyValue = (targetValue, currencyConfig, options) => {\n    // Remove all special characters except decimal for money comparisons\n    const amount = String(targetValue).replace(/[^\\d.]/g, '');\n    const validationResult = {\n      result: formatCurrencyValue(localStringToNumber(amount)\n        .toLocaleString(undefined, options)),\n      errorMessage: ''\n    };\n\n    switch (true) {\n    case (amount < currencyConfig.minAmount):\n      validationResult.errorMessage = currencyConfig.minAmountError;\n      break;\n    case (amount > currencyConfig.maxAmount):\n      validationResult.errorMessage = currencyConfig.maxAmountError;\n      break;\n    default:\n      break;\n    }\n\n    return validationResult;\n  };\n\n  useLayoutEffect(() => {\n    setFirstRender(false);\n    if (!firstRender) {\n      validate();\n    }\n  }, [validateInput]);\n\n  const handleOnInputChanged = (e) => {\n    e.preventDefault();\n    let newError = '';\n    if (!e.target.value) {\n      newError = config.emptyError;\n    } else {\n      newError = '';\n    }\n    setValue(e.target.value);\n    setError(newError);\n  };\n\n  const handleFocusOut = (e) => {\n    e.preventDefault();\n    const targetValue = e.target.value;\n    const inputPattern = new RegExp(config.pattern);\n    let newError = '';\n\n    if (value && inputPattern && !inputPattern.test(value)) {\n      newError = config.invalidError;\n    } else if (!value && config.required) {\n      newError = config.emptyError;\n    } else {\n      newError = '';\n    }\n\n    // If input type is currency perform extra validation to get currency value.\n    if (inputPattern.test(targetValue) && targetValue && config.inputType === 'currency') {\n      const { result, errorMessage } = validateCurrencyValue(targetValue, config, currencyOptions);\n      setValue(result);\n      newError = errorMessage;\n    }\n\n    setError(newError);\n  };\n\n  return (\n    <div className=\"form-item\">\n      <label htmlFor={inputId}>\n        <span className=\"input-label card-name-label\">\n          {config.label}\n          {config.required ? <span className=\"mandatory\">*</span> : ''}\n        </span>\n        {children}\n        <input\n          id={inputId}\n          type=\"text\"\n          tabIndex=\"0\"\n          className={error ? 'invalid' : ''}\n          aria-describedby={`${inputId}-error`}\n          aria-label={config.label}\n          placeholder={config.placeholder}\n          onChange={handleOnInputChanged}\n          onBlur={handleFocusOut}\n          value={value}\n          ref={inputRef}\n          maxLength={config.maxLength}\n          minLength={config.minLength}\n          aria-required=\"true\"\n          aria-invalid={!!error} />\n      </label>\n      <div id={`${inputId}-error`} className=\"error-info\">{error}</div>\n    </div>\n  );\n};\n\nInput.propTypes = {\n  config: PropTypes.shape({}),\n  inputValue: PropTypes.string,\n  inputId: PropTypes.string.isRequired,\n  setInputValue: PropTypes.func,\n  inputRef: PropTypes.shape({}),\n  validateInput: PropTypes.bool\n};\nexport default Input;\n","examples":[{"name":"CurrencyInput","description":"","code":"import React, { useState } from 'react';\nimport {\n  Input\n} from '../../../components';\nimport Config from '../../../config.json';\n\nconst CurrencyInput = () => {\n  const [validateForm] = useState(false);\n  const [formData, setFormData] = useState({\n    currencyValue: 0,\n    error: {\n      currencyValueError: ''\n    }\n  });\n\n  const handleCurrencyValue = (value, error) => {\n    const newData = { ...formData };\n    newData.currencyValue = value;\n    newData.error.currencyValueError = error;\n    setFormData(newData);\n  };\n\n  return (\n    <Input\n      config={Config.currencyInput}\n      inputId=\"currency-input-id\"\n      inputValue={formData.currencyValue}\n      setInputValue={handleCurrencyValue}\n      validateInput={validateForm} />\n  );\n};\n\nexport default CurrencyInput;\n"},{"name":"NumericInput","description":"","code":"import React, { useState } from 'react';\nimport {\n  Input\n} from '../../../components';\nimport Config from '../../../config.json';\n\nconst NumericInput = () => {\n  const [validateForm] = useState(false);\n  const [formData, setFormData] = useState({\n    numeric: 0,\n    error: {\n      numericError: ''\n    }\n  });\n\n  const handleNumeric = (value, error) => {\n    const newData = { ...formData };\n    newData.numeric = value;\n    newData.error.numericError = error;\n    setFormData(newData);\n  };\n\n  return (\n    <Input\n      config={Config.numberInput}\n      inputId=\"numeric-input-id\"\n      inputValue={formData.numeric}\n      setInputValue={handleNumeric}\n      validateInput={validateForm} />\n  );\n};\n\nexport default NumericInput;\n"},{"name":"TextInput","description":"","code":"import React, { useState } from 'react';\nimport {\n  Input\n} from '../../../components';\nimport Config from '../../../config.json';\n\nconst TextInput = () => {\n  const [validateForm] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    error: {\n      nameError: ''\n    }\n  });\n\n  const handleName = (value, error) => {\n    const newData = { ...formData };\n    newData.name = value;\n    newData.error.nameError = error;\n    setFormData(newData);\n  };\n\n  return (\n    <Input\n      config={Config.input}\n      inputId=\"input-id\"\n      inputValue={formData.name}\n      setInputValue={handleName}\n      validateInput={validateForm} />\n  );\n};\n\nexport default TextInput;\n"}]},{"name":"Modal","description":"","props":{"id":{"type":{"name":"string"},"required":false,"description":""},"dialogTitle":{"type":{"name":"string"},"required":false,"description":""},"dialogDescription":{"type":{"name":"string"},"required":false,"description":""},"closed":{"type":{"name":"func"},"required":true,"description":""}},"code":"import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../Icon/Icon';\nimport useClickAway from './useClickAway';\nimport './modal.css';\n\nconst Modal = (props) => {\n  const {\n    id,\n    children,\n    dialogTitle,\n    dialogDescription,\n    closed\n  } = props;\n\n  const closeButton = useRef();\n  const rootRef = useRef();\n\n  useEffect(() => {\n    closeButton.current.focus();\n  }, []);\n\n  useClickAway(rootRef, (e) => {\n    closed(e);\n  });\n\n  return (\n    <div\n      id={id}\n      className=\"modal\"\n      role=\"dialog\"\n      aria-labelledby={dialogTitle}\n      aria-describedby={dialogDescription}\n      ref={rootRef}>\n      <button\n        type=\"button\"\n        ref={closeButton}\n        aria-label=\"close\"\n        className=\"close-button\"\n        onClick={e => closed(e)}\n        onKeyDown={e => closed(e)}>\n        <Icon name=\"close\" id=\"close\" />\n      </button>\n      <div className=\"modal-content\">{children}</div>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  id: PropTypes.string,\n  dialogTitle: PropTypes.string,\n  dialogDescription: PropTypes.string,\n  closed: PropTypes.func.isRequired\n};\n\nexport default Modal;\n","examples":[{"name":"ExampleModal","description":"","code":"import React, { useState } from 'react';\nimport { Modal, Button } from '../../../components';\n\nconst ExampleModal = () => {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Button\n        handleClicked={() => setModalOpen(true)}>\n        Open Modal\n      </Button>\n      {modalOpen && (\n        <Modal\n          closed={() => setModalOpen(false)}\n          dialogTitle=\"dialogTitle\"\n          dialogDescription=\"dialogLinkDescription\">\n          <h1 id=\"dialogTitle\">Title</h1>\n          <h2>Description</h2>\n          <p id=\"dialogLinkDescription\">Some exciting paragraph</p>\n          <img src=\"https://www.royalmail.com/sites/default/files/fee-to-pay-card---390x550.png\" alt=\"\" />\n        </Modal>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default ExampleModal;\n"}]},{"name":"PostcodeFinder","description":"","props":{"config":{"type":{"name":"shape","value":{}},"required":false,"description":""},"placeholder":{"type":{"name":"string"},"required":false,"description":""},"label":{"type":{"name":"string"},"required":true,"description":""},"setSearchResult":{"type":{"name":"func"},"required":true,"description":""},"validateInput":{"type":{"name":"bool"},"required":true,"description":""},"required":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React, { useState, useRef, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { DebounceInput } from 'react-debounce-input';\nimport AddressList from './AddressList';\n\nconst PostcodeFinder = (props) => {\n  const [searchText, setSearchText] = useState('');\n  const [addressList, setAddressList] = useState(null);\n  const [firstRender, setFirstRender] = useState(true);\n  const [error, setError] = useState('');\n  const [loqateAddress, setLoqateAddress] = useState(null);\n\n  const searchRef = useRef(null);\n\n  const {\n    setSearchResult,\n    label,\n    placeholder,\n    children,\n    required,\n    config,\n    validateInput\n  } = props;\n\n  const {\n    channelIsland,\n    britishForce,\n    key,\n    addressKeyNames,\n    addressErrors\n  } = config;\n\n  useLayoutEffect(() => {\n    setSearchResult(loqateAddress, error);\n  }, [loqateAddress, error]);\n\n  const validate = () => {\n    if (!loqateAddress) {\n      setError(addressErrors.requiredFieldError);\n    } else if (loqateAddress && error === addressErrors.requiredFieldError) {\n      setError('');\n    }\n  };\n\n  useLayoutEffect(() => {\n    setFirstRender(false);\n    if (!firstRender) {\n      validate();\n    }\n  }, [validateInput]);\n  /**\n   * Format loqate result to get following address fields\n   * Line1, Line2, Line3, Line4, Line5, City and PostalCode\n   */\n  const getFormattedAddress = (selectedAddress) => {\n    const address = {};\n    addressKeyNames.forEach((addressKey) => {\n      if (selectedAddress) {\n        address[addressKey] = selectedAddress[addressKey];\n      }\n    });\n    setLoqateAddress(address);\n  };\n\n  const getAddressList = (addressStr, addressId) => {\n    let addresses = [];\n    return axios.get(`https://services.postcodeanywhere.co.uk/Capture/Interactive/Find/v1.00/json3ex.ws?Key=${encodeURIComponent(key)}&Country=GBR&Text=${addressStr}&Container=${addressId}&LanguagePreference=en&LastId=${addressId}&SearchFor=Everything&$block=true&$cache=true`)\n      .then((response) => {\n        if (response.data.Items && response.data.Items.length > 0 && response.data.Items[0].Error) {\n          const newError = addressErrors.invalidSearchError.replace('@', addressStr);\n          setError(newError);\n          return;\n        }\n\n        if (response.data.Items && response.data.Items.length === 0) {\n          const errorDescription = addressErrors.invalidSearchError.replace('@', addressStr);\n          setError(errorDescription);\n          return;\n        }\n\n        if (response.data.Items && response.data.Items.length > 0) {\n          addresses = response.data.Items;\n        }\n      })\n      .catch(() => {\n        const newError = addressErrors.apiDownError;\n        setError(newError);\n      })\n      .then(() => {\n        setAddressList(addresses);\n      });\n  };\n\n  const getAddressDetails = (address) => {\n    if (address.Type === 'Address') {\n      let newError = '';\n      axios.get(`https://services.postcodeanywhere.co.uk/Capture/Interactive/Retrieve/v1.00/json3ex.ws?Key=${encodeURIComponent(key)}&Id=${address.Id}&$cache=true&$block=true&LastId=${address.Id}&SearchTerm=&field1format=${encodeURIComponent('{Latitude}')}&field2format=${encodeURIComponent('{Longitude}')}`)\n        .then((response) => {\n          if (response.data.Items && response.data.Items.length > 0) {\n            const selectedAddress = response.data.Items[0];\n            const postalCode = response.data.Items[0].PostalCode;\n            const areaCode = postalCode.replace(/ /g, '').substring(0, 2).toUpperCase();\n            // Check for british force area and channelIsland.\n            if (britishForce && britishForce.toUpperCase() === areaCode) {\n              newError = addressErrors.britishForceError;\n            } else if (channelIsland.length && channelIsland.includes(areaCode)) {\n              newError = addressErrors.channelIslandError;\n            } else {\n              getFormattedAddress(selectedAddress);\n            }\n            setError(newError);\n            setAddressList([]);\n            setSearchText('');\n          }\n        })\n        .catch(() => {\n          newError = addressErrors.apiDownError;\n          setError(newError);\n        });\n\n      if (searchRef.current) {\n        searchRef.current.focus();\n      }\n      return;\n    }\n    getAddressList(address, address.Id);\n  };\n\n  const onHandleAddressListKeyDown = (address, e) => {\n    if (e.keyCode === undefined || (e.keyCode || e.which) === 13) {\n      getAddressDetails(address);\n    }\n  };\n\n  const onHandleSearchInputChanged = (e) => {\n    if (e.target.value) {\n      setLoqateAddress(null);\n      setError('');\n      setSearchText(e.target.value);\n      getAddressList(e.target.value);\n    }\n\n    if (!e.target.value) {\n      setSearchText(e.target.value);\n      setAddressList([]);\n      setError('');\n    }\n  };\n\n  const handleFocusOut = (e) => {\n    e.preventDefault();\n    if (!loqateAddress && !addressList) {\n      setError(addressErrors.requiredFieldError);\n    }\n  };\n\n  return (\n    <div className=\"postcode-finder\">\n      <div className=\"form-item\">\n        <label htmlFor=\"search-input\">\n          <span className=\"input-label\">\n            {label}\n            {required ? <span className=\"mandatory\">*</span> : ''}\n            {children}\n          </span>\n          <DebounceInput\n            debounceTimeout={500}\n            id=\"search-input\"\n            inputRef={searchRef}\n            className={error ? 'invalid' : ''}\n            placeholder={placeholder}\n            onChange={e => onHandleSearchInputChanged(e)}\n            onBlur={handleFocusOut}\n            value={searchText}\n            aria-required=\"true\"\n            aria-describedby=\"address-error\"\n            aria-invalid={!!error} />\n          <span id=\"search-input-help\" className=\"visually-hidden\">{placeholder}</span>\n        </label>\n        {\n          error ? <div id=\"address-error\" className=\"error-info\">{error}</div> : null\n        }\n      </div>\n      <div role=\"alert\" className=\"visually-hidden\">\n        {addressList ? `${addressList.length} address Found` : null}\n      </div>\n      {\n        addressList && addressList.length > 0\n          ? (\n            <AddressList\n              results={addressList}\n              getDetails={address => getAddressDetails(address)}\n              handleKeyDown={(result, e) => onHandleAddressListKeyDown(result, e)} />\n          ) : null\n      }\n    </div>\n  );\n};\n\nPostcodeFinder.propTypes = {\n  config: PropTypes.shape({}),\n  placeholder: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  setSearchResult: PropTypes.func.isRequired,\n  validateInput: PropTypes.bool.isRequired,\n  required: PropTypes.bool\n};\n\nexport default PostcodeFinder;\n","examples":[{"name":"ExamplePostcodeFinder","description":"","code":"import React, { useState } from 'react';\nimport {\n  PostcodeFinder\n} from '../../../components';\nimport Config from '../../../config.json';\n\nconst ExamplePostcodeFinder = () => {\n  const [validateForm] = useState(false);\n  const [formData, setFormData] = useState({\n    address: '',\n    error: {\n      addressError: ''\n    }\n  });\n\n  const handleAddress = (address, error) => {\n    const newData = { ...formData };\n    newData.address = address;\n    newData.error.addressError = error;\n    setFormData(newData);\n  };\n\n  return (\n    <React.Fragment>\n      <PostcodeFinder\n        label=\"Address\"\n        placeholder=\"start typing your address\"\n        setSearchResult={handleAddress}\n        config={Config.loqate}\n        validateInput={validateForm}\n        required />\n      <div className=\"address-desc\">\n        {\n          formData.address\n          && Object.values(formData.address).filter(Boolean).map((val, index) => {\n            const key = `${index}-${val}`;\n            return (\n              <span className=\"address-line\" key={key}>{val}</span>\n            );\n          })\n        }\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ExamplePostcodeFinder;\n"}]},{"name":"RadioButton","description":"","props":{"id":{"type":{"name":"string"},"required":true,"description":""},"value":{"type":{"name":"string"},"required":false,"description":""},"checked":{"type":{"name":"bool"},"required":false,"description":""},"name":{"type":{"name":"string"},"required":false,"description":""},"handleOptionChange":{"type":{"name":"func"},"required":false,"description":""},"invalid":{"type":{"name":"bool"},"required":false,"description":""},"disabled":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RadioButton = (props) => {\n  const {\n    id,\n    value,\n    checked,\n    handleOptionChange,\n    name,\n    invalid,\n    children,\n    disabled\n  } = props;\n  return (\n    <div className=\"form-item js-form-type-radio form-type-radio\">\n      <input\n        type=\"radio\"\n        id={id}\n        className=\"form-checkbox\"\n        value={value}\n        checked={checked}\n        disabled={disabled || undefined}\n        name={name}\n        onChange={handleOptionChange}\n        aria-invalid={invalid} />\n      <label className={`option ${invalid ? 'invalid' : ''}`} htmlFor={id}>\n        {children}\n      </label>\n    </div>\n  );\n};\n\nRadioButton.propTypes = {\n  id: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  checked: PropTypes.bool,\n  name: PropTypes.string,\n  handleOptionChange: PropTypes.func,\n  invalid: PropTypes.bool,\n  disabled: PropTypes.bool\n};\n\nexport default RadioButton;\n","examples":[{"name":"ExampleRadioButton","description":"","code":"import React from 'react';\nimport {\n  RadioButton\n} from '../../../components';\n\nconst ExampleButton = () => (\n  <React.Fragment>\n    <RadioButton name=\"YES\" id=\"yes-id\" value=\"YES\">Radio Button 1</RadioButton>\n    <RadioButton name=\"NO\" id=\"no-id\" value=\"NO\">Radio Button 2</RadioButton>\n  </React.Fragment>\n);\n\nexport default ExampleButton;\n"}]},{"name":"RadioButtonGroup","description":"","props":{"name":{"type":{"name":"string"},"required":true,"description":""},"setRadioButtonValue":{"type":{"name":"func"},"required":true,"description":""},"invalid":{"type":{"name":"bool"},"required":false,"description":""},"config":{"type":{"name":"shape","value":{}},"required":true,"description":""},"defaultValue":{"type":{"name":"string"},"required":false,"description":""},"initialValidation":{"type":{"name":"bool"},"required":true,"description":""}},"code":"import React, { useState, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst RadioButtonGroup = (props) => {\n  const {\n    config,\n    setRadioButtonValue,\n    initialValidation,\n    defaultValue,\n    name,\n    invalid\n  } = props;\n\n  const [firstRender, setfirstRender] = useState(true);\n  const [value, setValue] = useState(defaultValue || '');\n  const [error, setError] = useState('');\n\n  const validate = () => {\n    setError(!value ? config.emptyError : '');\n  };\n\n  useLayoutEffect(() => {\n    setRadioButtonValue(value);\n  }, [value]);\n\n  useLayoutEffect(() => {\n    if (!firstRender) {\n      validate();\n    } else {\n      setfirstRender(false);\n    }\n  }, [initialValidation]);\n\n  const handleOptionChange = (e) => {\n    setValue(e.target.value);\n    setError('');\n  };\n\n  return (\n    <React.Fragment>\n      {\n        config.fields.map(field => (\n          <div className=\"form-item js-form-type-radio form-type-radio\" key={field.id}>\n            <input\n              type=\"radio\"\n              id={field.id}\n              className=\"form-checkbox\"\n              value={field.value}\n              checked={value === field.value}\n              disabled={field.disabled || undefined}\n              name={name}\n              onChange={handleOptionChange}\n              aria-invalid={invalid} />\n            <label className={`option ${error ? 'invalid' : ''}`} htmlFor={field.id}>\n              {field.label}\n            </label>\n          </div>\n        ))\n      }\n      <div id={`${name}-error`} className=\"error-info\">{error}</div>\n    </React.Fragment>\n  );\n};\n\nRadioButtonGroup.propTypes = {\n  name: PropTypes.string.isRequired,\n  setRadioButtonValue: PropTypes.func.isRequired,\n  invalid: PropTypes.bool,\n  config: PropTypes.shape({}).isRequired,\n  defaultValue: PropTypes.string,\n  initialValidation: PropTypes.bool.isRequired\n};\n\nexport default RadioButtonGroup;\n","examples":[{"name":"ExampleRadioButtonGroup","description":"","code":"import React, { useState } from 'react';\nimport {\n  RadioButtonGroup\n} from '../../../components';\nimport Config from '../../../config.json';\n\nconst ExampleRadioButtonGroup = () => {\n  const [validateForm] = useState(false);\n  const [formData, setFormData] = useState({\n    radioButtonValue: ''\n  });\n\n  const handleRadioButton = (value) => {\n    const newData = { ...formData };\n    newData.radioButtonValue = value;\n    setFormData(newData);\n  };\n\n  return (\n    <RadioButtonGroup\n      config={Config.radioButton}\n      name=\"radio-button-group\"\n      defaultValue=\"radio2\"\n      setRadioButtonValue={value => handleRadioButton(value)}\n      initialValidation={validateForm} />\n  );\n};\n\nexport default ExampleRadioButtonGroup;\n"}]},{"name":"SectionWrap","description":"","props":{"id":{"type":{"name":"string"},"required":false,"description":""},"extraClasses":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SectionWrap = (props) => {\n  const {\n    id,\n    extraClasses,\n    children\n  } = props;\n  const classes = ['section'];\n  if (extraClasses) {\n    classes.push(extraClasses);\n  }\n  return (\n    <section\n      id={id}\n      className={classes.join(' ')}>\n      <div className=\"section-inner\">\n        <div className=\"section-container\">\n          <div className=\"section-row\">\n            <div className=\"section-col\">\n              <div className=\"section-col-inner\">\n                {children}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nSectionWrap.propTypes = {\n  id: PropTypes.string,\n  extraClasses: PropTypes.string\n};\n\nexport default SectionWrap;\n","examples":[{"name":"ExampleSectionWrap","description":"","code":"import React from 'react';\nimport {\n  SectionWrap\n} from '../../../components';\n\nconst ExampleSectionWrap = () => (\n  <SectionWrap extraClasses=\"head\">\n    <h1>Component Library</h1>\n  </SectionWrap>\n);\n\nexport default ExampleSectionWrap;\n"}]},{"name":"Spinner","description":"","code":"import React from 'react';\nimport './spinner.css';\n\nconst Spinner = () => (\n  <div className=\"spinner-wrap\">\n    <div className=\"spinner\"></div>\n  </div>\n);\n\nexport default Spinner;\n","examples":[{"name":"ExampleSpinner","description":"","code":"import React from 'react';\nimport {\n  Spinner\n} from '../../../components';\n\nconst ExampleSpinner = () => <Spinner />;\n\nexport default ExampleSpinner;\n"}]},{"name":"Tooltip","description":"","props":{"message":{"type":{"name":"string"},"required":true,"description":""},"position":{"type":{"name":"string"},"required":true,"description":""}},"code":"/**\n * A reusable tooltip to render on mouse hover and destroy on mouse out.\n * This accept tooltip position(top, bottom,right,left) as props to render accordingly.\n * Element that need a tooltip on mouse hover need to be wrapped inside this component\n * e. g. <Tooltip> hover me </Tooltip>.\n */\nimport React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { uniqueId } from 'lodash';\nimport Icon from '../Icon/Icon';\n\nconst Tooltip = (props) => {\n  const [displayTooltip, setDisplaytooltip] = useState(false);\n  const tooltipRef = useRef();\n  const {\n    position,\n    message\n  } = props;\n\n  const keyboardConstants = {\n    enter: 13 // The 13 value is equivalent to the \"Enter\" or the \"Return\" key code\n  };\n\n  const tooltipMessageId = uniqueId('toolTip-');\n\n  const handleToggleTooltip = (e) => {\n    if (e.which !== keyboardConstants.enter || e.keyCode !== keyboardConstants.enter) {\n      e.preventDefault();\n    }\n    setDisplaytooltip(!displayTooltip);\n    tooltipRef.current.focus();\n  };\n\n  const handleKeyPressToggle = (e) => {\n    e.preventDefault();\n    if (e.which === keyboardConstants.enter || e.keyCode === keyboardConstants.enter) {\n      handleToggleTooltip(e);\n    }\n  };\n\n  return (\n    <span\n      className=\"tooltip\">\n      <span\n        role=\"button\"\n        tabIndex={0}\n        className=\"tooltip-trigger\"\n        aria-label=\"help\"\n        aria-describedby={tooltipMessageId}\n        aria-live=\"assertive\"\n        ref={tooltipRef}\n        onClick={handleToggleTooltip}\n        onKeyPress={handleKeyPressToggle}>\n        <Icon name=\"question\" id=\"help-tip\" />\n      </span>\n      {\n        displayTooltip\n        && (\n          <div className={`tooltip-bubble tooltip-${position}`}>\n            <div id={tooltipMessageId} className=\"tooltip-message\" aria-live=\"assertive\">\n              {message}\n            </div>\n            <span\n              role=\"button\"\n              tabIndex={0}\n              className=\"tooltip-close\"\n              aria-label=\"Close tooltip\"\n              onClick={handleToggleTooltip}\n              onKeyPress={handleKeyPressToggle}>\n              <Icon name=\"cross\" id=\"close\" />\n            </span>\n          </div>\n        )\n      }\n    </span>\n  );\n};\n\nTooltip.propTypes = {\n  message: PropTypes.string.isRequired,\n  position: PropTypes.string.isRequired\n};\n\nexport default Tooltip;\n","examples":[]}]